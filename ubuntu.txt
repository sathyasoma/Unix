Notes:
==========

operating system:
=================
** interface between system hardware and user.(as u know w/o os we cant perform any activity)

** os is the first software which is going load when we start pc...


OS responsibilties:
==================
** Process scheduling

** memory management

** security(keeping users data..)

** file management

** controlling i/o activities




operating systems are classified into 

1)single user and single tasking os(sust)

at a time on user interaction...at a time one task
 
2)single user and multi tasking os

3)multi user and multi tasking


history of linux:
===================

** its  a command  user interface operatingsystem,it can able to work mini,micro,super,mainframe computers..
 
** in 1969  at&t labs(bell labs)lead by ken thomson,dennis ritchie the project name is multics

** MULTICS:multi information computing services ,it is first official os in s/w industry and origin of currnt os's(it can support 2 users) 

**in 1971 to recover drawbacks multics again they re-implmented  UNICS(UNI FLUXED INFORMATION COMPUTING SYSTEM)
developed on assembly language(symbolic/lll).

** in 1972 c language realesed into market by dennis ritchie

** in 1973==>ken thomson(B),dennis ritchie(C)..in at&t labs they re-implmented unics on c PL and renamed as unix
Advantages:
===========
1)multi user capability(multi users can able access system resources like ram,memory,apps)

2)multi programming(at a time multiple application can execute)

3)portability(we can run on anay hardware device..)

4)security (security wise unix every inch secured like authentication,file security,hiding..)

5)unix file system stores information in files.

6)strong networking support(with the help of socket programming...)

7)unix shell programming..

what is shell?

** collections of unix commands is called shell.

pipes -->kind redirection

filter-->o/p filtering.

UNIX architecture:
===================


hardware-->physical component of a system(monitor,mouse,keyboard)

kernel-->llp,its heart of os ,it is an interface b/w shell and hardware,kernel always performs low level tasks(device management,memory management,system calls..)

shell-->its high level programming

application programs--->like word's,browser,powerpoints,spreadsheets....etc

users


unix file system:
================

/bin->binary(it containse all executable files available for users)
/dev-->device(it containse all device drivers)
/boot(it cntainse all bootable information to reboot system)
/home(it containse users and sub users ...)
/etc(it containse configuration files admin related)
/usr(default directory,if we install any new software by default fst install in usr)

unix is case sensitive os,we must indicate lowercase


flavours:
=========
flavour means related to particular organization

man catmksta1)bsd (borkley software distribution)default os in 1980's in pc

2)sun solaries

3)sun microsystems

4)ibm Aix

5)hp 

6)linux (gui) and unix(cui)

unix basic commands:
======================
unix is collection of commands


a command is specific instrction given to a computer application to perform some kind operation task.

===============================================
file system
---------------

all commands are case sensitive(in lowercase,started wth alphabet,all are reserve words,no special symbols)

who-->currently how many  user are logged in
whoami-->direct username /logname
date
cal -1
pwd--present working directory

cd .. to go back
clear to clear the screen

man-->manual(online pages info(help)) use q to comeout of manual(quit)

who --count will display no of users // who -b 
cal--to see calender based system date..cal -3 to see 3 months info,cal -y to display complete mnths
date--it will print date
date +%a -->only day 'fri'
date +%A -->the day in full form 'friday' same b for month b and B

in unix files are classified into 3 types	

normal files or ordinary files

how to create?

cat--->concardinates ,cat can do 3 things creating a file,display the content,appending the file

cat > ===> '>' standard o/p redirectional operator


cat > filename (it will give access to write content  after writing ctrl+d to save and exit and display prompt($user prompt # admin part))

to see the content 

cat <===>  '<'standard i/p redectional operator(optional *)
cat < filename 

'>>'cat with append redirectional operator to append
cat >> filename and write data

touch  -->to create empty files

touch -a -->to display last access time
touch -m -->modification time  (ls -l  list with time)
stat filename -->to display complete status

file *
Directory files:
================
mkdir --->to create directory

cd .. to come out of directory

cd ../.. to come of 2 directories at a time

rmdir --->to remove empty directory

rm file name --->to remove file

rm -r directory--->to remove non empty directory(force)

=================================================
-v with command to get  info what commad has been done..
-i with command interactive

-r with copy -->copy with different name 


mv -->move(cut,paste)
cp-->copy(copy,paste)



ls:
=====
ls to list files

ls -a to display notmal and hidden files. (.indicate current directory .. parent directory)
 
 to create hidden file :
 =================
a file starting with single . or .. is known as hidden file

ex: 
cat > mydata.txt
my personal file.....

ctrl+d to close and save

cat mydata.txt

my personal file.....





ls -a to see hidden also...

wt abt hidden directory...

same mkdri .direcotry name

ls -a


we can change hidden to normal and vice-versa

ls -F with notations

forword slash indiacates direcotry

ls  -i with inode numbers
index numbers (when system crash using index numbers we can get ..always unique)

ls -l  long listing detailed info abt file

ls -t time based display

ls -rt above results in reverse

ls -r reverse of ls

ls -1 to see ls line by  line

ls -s to see ls with size
ls rm -r * to remove all files ....

ls ? display ls with single charecter
ls ?? display ls with double charecter

rm ? remove the file single charecter

? always single charecter

* one o more charecter



giving permission we have two ways

1)symbolic mode
2)absolute mode


on-1

off-1

-rw- rw- r--

110  110 100

0,1,2,3,4,5,6,7





Users:
======
** to create user fist we need to move to admin  for that  sudo -i

to see all users ls  /home
chown newownername filename ===>to change owner

 Use command "sudo adduser"

sudo adduser username

su   secondusername --- for switch user

groupadd name --toadd a group

chgrp othergrpname filename  ===>to change group

For disabling an account using Terminal, remove the password set on the account.


sudo adduser username

Adds a user

sudo passwd -l 'username'

Disable a user

sudo userdel -r 'username'

Delete a user

sudo usermod -a -G GROUPNAME USERNAME

Add user a to a usergroup

sudo deluser USER GROUPNAME

Remove user from a user group















** 1990-1991 linus torvald has realesed in the market linux kernel 0.02 
**its open source it has many flavours...
1)pwd====>present working directory(by typing this  we will get present working directory)
2)ls====>it list out the total files or directorys folders present in home folder
3)ls  -a ====>if we want see the hidden files (space is required)
4)clear ====>it will clear the terminal  
5)mkdir ====>it is used to create the floders mkdir 'folder name'
6)rmdir====>it is used to remove the directory/folder
7)nano ====>it is used to create files (txt)
8)rm ====>to remove the files 
9)cd .. ====>it is used to move the directory to back 
10)cat  <filename>
hello welcome to dasldn
asdsa
dsad
ctrl+d
now what ever  we entered that text will be saved into that file name.
cat <file name>//to see the data in that

we can see the mulltiple files at a time
like 
cat <f1><f2><f3><f4>

if we want add the data to exsisting file  
cat >> <filename >
then we can add the data  and then ctrl+d


**
cp <file name>  <new file name >

cp <file name 1><filename 2>

it overides the data 1 to 2  

rm is used to delete the file 

mv is used to rename the file name 
mv is also used to change the file directry
mv <filename> <directory name >


ln is used to to make the link of files 

ln <filename1><filename2>
if we do any changes in filename1 it will effect on both files.

vi editor
both files data combined .

wc is used to get no of lines ,no of words ,no of charecters  in a specified text

wc -c to get only charecters
wc -l to get only no off lines 
wc -w  to get no of words are there in that txt

wc <filename>
we will get the no of lines,words ,charecters in tht specified folder
wc -l
wc -w
wc -c
...



***
directory files will be looked like blue color  

normal files looks like in white color.

executable fies will be displyed in green color .



Comparing commands :-
----------------------------------------
cmp

$cmp fn1 fn2  <enter>
 
nothing means to files had same data ...
if tit return s somthng means there is differrence between  data  of those two file 













communication commands:-
------------------------------------------

1)offline communication
2)login communication

online communication:-
-------------------------------------
sender and receiver both should be in login position .
$ write <username> <terminal number(optional)> 
ctrl+d to terminate communnication


mesg N(i dont want to  get any message)
mesg y(we will get mesages)

offline cmmunication:-
----------------------------------
sender should be in login position and receiver may/may not be 

if recceiver not loged in the message are in server until he loged in

mail <username >
...
...
how to see mails

mail <enter>

i want read mail 

mail 
 
&1===>"to see the particular mail completly 1 st message " 

&d ===>to delete 

& 2 d===>second mail will be delete

&2 s  <filename >==>to save specified  folder   of that mail

&q ====>to came out from the mail

what ever the unread mail's are waiting and saved under mbox folder






SHELL SCRIPTING:
==================

shell:
-------
* collection of unix commands is called shellscript

in every os shellscript is common word 

every shellscript ends with .sh

standrard shell-- .sh (bone/bash shell)the shell scrpting in 1970's implemented by steven bone with the help c syntax.

bash shell is the  default shell.

to know which u hable,type echo $0  in commandline


if we want convert one shell to another shell

ex:
$ksh
$echo $0
ksh
for exit 
exit
====================

bash prompt is $
 bash prompt syntax is sh(standard shell)
 
featurs of shell scrpting:
==========================
1)execute lumsum cmmands at a time
2)automating  your daily tasks......day wise duties(shut down,logoff,restart,creation,deletion...etc we can do automatically with the help programming)
3)automating 	repetitive tasks....n number of times a duty it can perform (repeatdly no need write commands).

different types of shell:
========================

1)the bourne shell   (the shell prompt $,execution on command sh) 
2)the c shell         (the shell prompt %,execution on command csh)
3)the korn shell     (the shell prompt %,execution on command ksh or korn shell)
 

Editors:
=======
**ascii formated files,text files()

**kenthomson --->editors	 1970's first editor software  Qed(quid editor)

**then again he implemented Fred(friendly editor)

** then renamed as ed after ex

** using ex vi visual editior(for linux)

**vim  visualimproved

vim,gedit,vi,emax are linux flavours

qed....unix flavours


vi editor options:
=================
mainly three modes we hav vi editior

command,insert,ex command mode

command to insert==>i

insert to command ==>O

command to execute===>shift:

w-->to save latest modificcation
q-->to quit from the current file

wq-->save and quit

!q-->force quit

creating shell

vi myshell.sh
i-->insert mode

escape
:wq

sh myshell.sh

**********************************

first editor:
=============
ed filename 

it will give no of characters  

1 enter for 1st line.......at a time only one line we can see

vi editior:
==============
j-->move cursor down one line
k-->move cursor up one line
h-->move cursor left one character
l--->move cursor right one character
0---->move cursor to start of current line
shift+$---->move cursor to end of current line
w---->move cursor beginning of next word
b---->move cursor back to beginning of preceding word

x--->1 char delete
dw--->1 worde delete 
dd--->delete entire line





shell variables:
=================

variables are two types 
1)system defined variables
2)user defined variables

** script means weekly or loosley types programming and programming languages are strictly typed(syntax based),

scripting is interpreter based(less libraries) and maximum programming language(more libraries need) is compiler based(for scripting no special set up is not need  but programming languages need )

........
.......

x=100
echo $x
100
echo $0--->enter
bash
ksh--->enter
echo $x
no access bcoz local

export x became like global

exit is the command to exit from shell
  
shell scrpting is devided into 2 types.

interactive shell script  
non interactive shell script

examples:
=========
1)i-insert,esacape to command mode,:wq to save and quit
vi myscript.sh

#to write comments will use 
echo  "welcome to shellscripting"
echo "hello how r u!"
echo  "thank you"

for execution 
sh myscirpt.sh


interactive shell program:
=====================
read using this we can take input from user

ex:

read a 
sandeep
read b
suresh

echo $a
echo $b


vi readex.sh
echo -n "enter your name :"
read name
echo "you entered Mr:" $name
 
:wq


conditional statments:
======================


if CONDITION 
then
STATEMENTS
fi

ex:
===
echo  "Enter a number: "
read num

if [[ $num -gt 10 ]]
then
echo "Number is greater than 10."
fi

ex:
====
echo "Enter Number:"
read num
if [[ ( $num -lt 10 ) && ( $num%2 -eq 0 ) ]] then
echo "Even Number"
else
echo "Odd Number"
fi


ex:
===
echo -n "Enter any number:"
read n

if [[ ( $n -eq 15 || $n -eq 45 ) ]]
then
echo "You are selected"
else
echo "failed"
fi




ex:
===

echo -n "Enter a number: "
read num

if [[ $num -gt 10 ]]
then
echo "Number is greater than 10."
elif [[ $num -eq 10 ]]
then
echo "Number is equal to 10."
else
echo "Number is less than 10."
fi



switch ex:
==========
echo -n "Enter a number: "
read num

case $num in
100)
echo "Hundred!!" ;;
200)
echo "Double Hundred!!" ;;
*)
echo "Neither 100 nor 200" ;;
esac



for loop ex:
===========
sum=0
for (( counter=1; counter<5; counter++ ))
do
echo -n "Enter Your Number:"
read n
(( sum+=n ))
#echo -n "$counter "
done
printf "\n"
echo "Result is: $sum"



String concatination:
====================
string1="Ubuntu"
string2="Linux"
string=$string1$string2
echo "$string is a great resource for Linux beginners."




subStrning
==========
Str="welcome to ibm banglore manyatha tech park"
subStr=${Str:0:20}
echo $subStr 





String with cut:
================
$ echo "cutting text from input" | cut -b 1

$ echo "cutting text from input" | cut -b 1,3

$ echo "cutting text from input" | cut -b 1-12



Functions :
============

ex:
====

function Add()
{
echo -n "Enter a Number: "
read x
echo -n "Enter another Number: "
read y
echo "Adiition is: $(( x+y ))"
}
Add

ex:
==
function Greet() {
str="Hello $name, what brings you to facebook.com?"
echo $str
}

echo "-> what's your name?"
read name

val=$(Greet)
echo -e "-> $val"






creating directories:
======================
ex:
====
echo -n "Enter directory name ->"
read newdir
cmd="mkdir $newdir"
eval $cmd


ex:
===
:' multi line comments'
# "single line comments"
echo -n "Enter directory name ->"
read dir
if [ -d "$dir" ]
then
echo "Directory exists"
else
`mkdir $dir`
echo "Directory created"
fi

deleting files:
===============
ex:
===
echo -n "Enter filename ->"
read name
rm -i $name

appending:
==========
echo "Before appending the file"
cat editors.txt
echo "6. NotePad++" >> editors.txt
echo "After appending the file"
cat editors.txt


file creation :
================
filename=$1
if [ -f "$filename" ]; then
echo "File exists"
else
echo "File does not exist"
fi


sending mail:
===============
recipient=�sandeepsomavarapu535@gmail.com�
subject=�Greetings�
message=�Welcome to linux�
`mail -s $subject $recipient <<< $message`


NOte:
====
apt-get install mailutils

date:
=====
year=`date +%Y`
month=`date +%m`
day=`date +%d`
hour=`date +%H`
minute=`date +%M`
second=`date +%S`
echo `date`
echo "Current Date is: $day-$month-$year"
echo "Current Time is: $hour:$minute:$second"























































